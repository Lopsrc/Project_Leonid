// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"
	auth "rest-api/m/rest-api/internal/auth"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, user
func (_m *Repository) Create(ctx context.Context, user *auth.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *auth.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, user
func (_m *Repository) Delete(ctx context.Context, user *auth.DeleteUser) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *auth.DeleteUser) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByEmail provides a mock function with given fields: ctx, user
func (_m *Repository) GetByEmail(ctx context.Context, user *auth.User) (auth.User, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for GetByEmail")
	}

	var r0 auth.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *auth.User) (auth.User, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *auth.User) auth.User); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(auth.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *auth.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Recover provides a mock function with given fields: ctx, user
func (_m *Repository) Recover(ctx context.Context, user *auth.RecoverUser) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Recover")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *auth.RecoverUser) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, user
func (_m *Repository) Update(ctx context.Context, user *auth.UpdateUser) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *auth.UpdateUser) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t) 
	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
